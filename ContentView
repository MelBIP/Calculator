import SwiftUI

enum ButtonType {
    case first, second, third, forth, fifth, sixth, seventh, eighth, nineth, zero
    case dot, equal, plus, minus, multiple, devide
    case percent, opposite, clear
    
    var buttonDisplayName: String {
        switch self {
        case .first:
            return "1"
        case .second:
            return "2"
        case .third:
            return "3"
        case .forth:
            return "4"
        case .fifth:
            return "5"
        case .sixth:
            return "6"
        case .seventh:
            return "7"
        case .eighth:
            return "8"
        case .nineth:
            return "9"
        case .zero:
            return "0"
        case .dot:
            return "."
        case .equal:
            return "="
        case .plus:
            return "+"
        case .minus:
            return "-"
        case .multiple:
            return "X"
        case .devide:
            return "÷"
        case .percent:
            return "%"
        case .opposite:
            return "+/-"
        case .clear:
            return "C"
        }
    }
    
    var backgroundColor: Color {
        switch self {
        case .first, .second, .third, .forth, .fifth, .sixth, .seventh, .eighth, .nineth, .zero, .dot:
            return Color("NumberButton")
        case .equal, .plus, .minus, .multiple, .devide:
            return Color.orange
        case .percent, .opposite, .clear:
            return Color.gray
            
        }
    }
    
    var foregroundColor: Color {
        switch self {
        case .first, .second, .third, .forth, .fifth, .sixth, .seventh, .eighth, .nineth, .zero, .dot, .equal, .plus, .minus, .multiple, .devide:
            return Color.white
        case .percent, .opposite, .clear:
            return Color.black
        }
    }
}

struct ContentView: View {
    
    @State private var totalNumber: String = "0"
    @State var tempNumer: Int = 0
    @State var operatorType: ButtonType = .clear
    @State var isNotEditing: Bool = true
    
    private let buttonData: [[ButtonType]] = [
        [.clear, .opposite, .percent, .devide],
        [.seventh, .eighth, .nineth, .multiple],
        [.forth, .fifth, .sixth, .minus],
        [.first, .second, .third, .plus],
        [.zero, .dot, .equal]
    ]
    
    var body: some View {
        ZStack {
            Color.black.ignoresSafeArea()
            
            VStack {
                Spacer()
                HStack {
                    Spacer()
                    Text(totalNumber)
                        .padding()
                        .font(.system(size: 73))
                        .foregroundColor(.white)
                }
                
                ForEach(buttonData, id: \.self) { line in
                    HStack {
                        ForEach(line, id: \.self) { item in
                            Button {
                                
//                                if touchCount % 2 {
//                                    // 불이 켜지고
//                                } else {
//                                    // 불이 꺼진다
//                                }
                                
                                if isNotEditing {
                                    if item == .clear {
                                        totalNumber = "0"
                                        isNotEditing = true
                                    }else if item == .plus ||
                                                item == .minus ||
                                                item == .multiple ||
                                                item == .devide {
                                        totalNumber = "Error"
                                    }else {
                                        totalNumber = item.buttonDisplayName
                                        isNotEditing = false  // 이미 입력받고 있을 때
                                    }
                                    
                                } else {  // 입력을 한 번이라도 받았을 때
                                    if item == .clear {
                                        totalNumber = "0"
                                        isNotEditing = true  // 새로 입력받을 때
                                    } else if item == .plus {
                                        tempNumer = Int(totalNumber) ?? 0 // 숫자를 저장
                                        operatorType = .plus // 더하기를 한다
                                        isNotEditing = true
                                    } else if item == .minus {
                                        tempNumer = Int(totalNumber) ?? 0
                                        operatorType = .minus
                                        isNotEditing = true
                                    } else if item == .multiple {
                                        tempNumer = Int(totalNumber) ?? 0
                                        operatorType = .multiple
                                        
                                    } else if item == .equal {
                                        
                                        if operatorType == .plus {
                                            totalNumber = String((Int(totalNumber) ?? 0) + tempNumer)
                                        } else if operatorType == .multiple {
                                            totalNumber = String((Int(totalNumber) ?? 0) * tempNumer)
                                        } else if operatorType == .minus {
                                            totalNumber = String(tempNumer - (Int(totalNumber) ?? 0))
                                        }
                                        
                                    } else {
                                        totalNumber += item.buttonDisplayName
                                    }
                                }
                            } label: {
                                Text(item.buttonDisplayName)
                                    //.bold()
                                    .frame(width: calculateButtonWidth(button: item), height: calculateButtonHeight(button: item))
                                    .background(item.backgroundColor)
                                    .cornerRadius(40)
                                    .foregroundColor(item.foregroundColor)
                                    .font(.system(size: 33))
                            }
                        }
                    }
                }
            }
        }
    }
    
    private func calculateButtonWidth(button buttonType: ButtonType) -> CGFloat {
         // (전체 너비 - 5*10)/4
        switch buttonType {
        case .zero:
            return ((UIScreen.main.bounds.width - 5 * 10) / 4) * 2
        default:
            return (UIScreen.main.bounds.width - 5 * 10) / 4
        }
    }
    
    private func calculateButtonHeight(button: ButtonType) -> CGFloat {
            return (UIScreen.main.bounds.width - 5 * 10) / 4
    }
}
    
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
